
  /* form_with に html: { class: "main-form-container" } を追加した場合のクラス */
.main-form-container {
    display: flex; /* ★ 中の .content-split-wrapper が高さを取れるように */
    flex-direction: column;
    flex-grow: 1; /* ★ .main-content の中で利用可能な高さを全て使う */
    height: 100%;/* height: 100%; でも良い場合がある */
    overflow: hidden; /* フォーム自体はスクロールさせない */
  }
  
  .content-area {
    padding: 0%;
    margin: 0%;
    background-color: #975b5b;
    width: 100%;
    height: 100%;
  }


  .content-split-wrapper {
    display: flex; /* これがポイント！左右に並べるためにFlexboxを使うよ */
    gap: 0px; /* 左右のパネルの間の隙間 */ 
    width: 100%; /* 親の幅をフルで使う */
    height: 100%; /* 不要になった */
  }

  .content-split-left,
  .content-split-right {
    flex: 1 1 0%; /* 左側のパネルは自動で広がる */
    min-width: 100px; /* 最小幅を300pxに設定 */
    background-color: #f8f9fa; /* 背景色を薄いグレーに */
    padding: 10px; /* 内側の余白 */
    margin: 10px;
    flex-direction: column; /* 縦に並べる */ 
    overflow: auto;
  }
  
  .content-header {
    margin-bottom: 30px;
    padding-bottom: 15px;
    border-bottom: 2px solid #e0e0e0;
    width: 60%;
  }
  
  .content-header h1 {
    font-size: 1.5rem;
    color: #343a40;
    margin: 0;
    font-weight: 600;
  }

  .form-section,
  .details-section {
    display: grid;
    grid-template-columns: repeat(2, 1fr); /* 2列のグリッドレイアウトを作成 */
    gap: 10px; /* 各要素の間に20pxの隙間を作成 */
    margin: 0;
    align-items: start;
  }

  .details-stock-section{
    display: grid;
    grid-template-columns: repeat(2, 1fr); /* 2列のグリッドレイアウトを作成 */
    gap: 10px; /* 各要素の間に10pxの隙間を作成 */
    align-items: start; /* 縦方向の中央揃え */
    margin-bottom: 10px; /* 下部に余白を追加 */
  }

  .form-stock-section{
    display: flex;
    grid-template-columns: repeat(2, 1fr); /* 2列のグリッドレイアウトを作成 */
    gap: 10px; /* 各要素の間に20pxの隙間を作成 */
    align-items: center;
  }

  .inventories-display-container{
    grid-template-columns: repeat(2, 1fr); /* 2列のグリッドレイアウトを作成 */
    background-color: #f8f9fa; /* 背景色を薄いグレーに */
    align-items: center; /* 縦方向の中央揃え */
    height: 80%; /* 高さを100%に設定 */
    overflow-y: auto; /* 内容が多い場合はスクロール可能にする */
  }
  
  .form-group,
  .detail-group {
    margin: 4px;
    position: relative;
  }
  
  /* 浮遊するラベルを持つform-groupに特定のパディングを設定 */
  .form-group.floating-label-group .form-input,
  .detail-group.floating-label-group .displayed-value {
    padding-top: 25px;
    padding-bottom: 12px;
    padding-left: 15px;
    padding-right: 15px;
  }
  
  /* ラベルボックスのスタイル */
  .label-box {
    position: absolute;
    top: -12px;
    left: 10px;
    background-color: #fcfcfc;
    color: #6c757d;
    font-size: 0.6rem;

    padding: 3px 6px;
    border-radius: 5px;
    z-index: 10;
    transition: all 0.2s ease-out;
    pointer-events: none;
  }

  /*フォーム*/
  .form-input,
  .displayed-value {
      width: 100%;
      height: 50px;
      padding: 12px 15px;
      border: 1px solid #ced4da;
      border-radius: 6px;
      font-size: 1rem;
      color: #44494d;
      background-color: #fcfcfc; 
      place-items: center; /* 中央揃え */
  }

  /* ★出荷済みラベル用のスタイルを追加 */
  .displayed-value.shipped-label,
  .label-box.shipped-label {
    background-color: #fcbec4; /* 背景色を赤に */
    color: #6c757d;             /* 文字色を白に */
    /* border: 1px solid #c82333; */ /* 枠線を付ける場合 (任意) */
  }


  .form-input:focus{
      border-color: #cde5fe; /* フォーカス時のボーダー色 */
      box-shadow: 0 0 5px rgba(0, 123, 255, 0.5); /* フォーカス時の影 */
      outline: none; /* デフォルトのアウトラインを消す */
  }
  /* ボタン類をラップするコンテナ（もしinnerの外に出すなら） */
  .content-split-right .bottom-actions-container {
    padding: 15px;
    background-color: #f8f9fa; /* content-split-right と同じ背景 */
    flex-shrink: 0; /* 縮まない */
    border-top: 1px solid #eee; /* 区切り線 */
  }
  .content-split-right .bottom-actions-container .form-actions {
      text-align: right; /* 送信ボタンを右寄せなど */
  }
  
  /*submitボタンのスタイル*/
  .form-actions {
    position: fixed; /* ビューポートに対して位置を固定 */
    bottom: 30px;    /* 画面の下から30pxの位置 */
    left: 5%;     /* 画面の右から30pxの位置 */
    z-index: 1000;   /* 他の要素より手前に表示するための指定 (数値が大きいほど手前) */
  }

  .btn-submit{
    padding: 12px 25px;         /* ボタンの余白 (大きめにして押しやすく) */
    font-size: 1.1em;           /* 文字サイズ */
    background-color:#cddaff;  /* ボタンの色 (例: プライマリーカラー) */
    color: rgb(73, 73, 73);               /* 文字色 */
    border: none;               /* 枠線なし */
    border-radius: 50px;        /* 角を丸くして円形に近いボタンに (お好みで) */
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); /* ちょっとリッチな影 */
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.1s ease; /* ホバー時のアニメーション */
  }

  .btn-submit:hover {
    background-color: #a5bcfc; /* ホバー時の色 */
    /*transform: translateY(-2px); /* 少し浮き上がるような効果 */
  }

  
  .primary-button {
    padding: 12px 30px;
    background-color: #007bff;
    color: #ffffff;
    border: none;
    border-radius: 6px;
    font-size: 1.05rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
    box-shadow: 0 4px 10px rgba(0, 123, 255, 0.2);
  }
  
  .primary-button:hover {
    background-color: #0056b3;
    box-shadow: 0 6px 15px rgba(0, 123, 255, 0.3);
  }

  .remove-part-button.btn-remove {
    background-color: transparent; /* 背景を透明に */
    border: none;                 /* 枠線をなしに */
    color: #e74d3c80;             /* アイコンの色 (例: 赤系) - お好みで調整 */
    padding: 5px;                /* アイコン周りの最小限の余白 (押しやすさのため) */
    margin-left: auto;           /* ★ 右寄せにする (もし親要素がFlexコンテナなら) */
    cursor: pointer;
    vertical-align: middle;
    line-height: 1;
    line-height: 1;              /* アイコンが垂直方向にずれないように */
    font-size: 1em;              /* アイコンのサイズを親要素に合わせるか、具体的に指定 */
    /* display: block; */        /* もし親がFlexでない場合、margin-left: auto; を効かせるため */
                                 /* ただし、他の要素との並びに影響するので注意 */
  }
  
  .remove-part-button.btn-remove:hover {
    color: #c0392b; /* ホバー時の色を少し濃く */
  }
  
  .remove-part-button.btn-remove .fa-trash {
    /* アイコン自体のサイズは 여기서 조정하거나, .remove-part-button の font-size で調整 */
  }
  

  .fixed-bottom-actions {
    /* position: fixed; bottom: 30px; right: 30px; などで右下に固定表示している想定 */
    /* もし固定表示ではなく、通常のフローで右寄せにしたい場合は、この要素の親に対して text-align: right; など */
    display: flex; /* 中のボタンを制御しやすくするため */
    justify-content: flex-end; /* ★ これで中の要素が右に寄る */
    padding: 10px 0; /* 例: 上下の余白 */
  }
  
  #add-inventory-button.btn-add { /* .btn-fab クラスは円形ボタン用なので、枠なしシンプルにするなら外してもOK */
    background-color: transparent; /* 背景を透明に */
    border: none;                 /* 枠線をなしに */
    color: #b1c6ff;             /* アイコンの色 (例: 緑系) */
    padding: 8px;                /* アイコン周りの余白 */
    cursor: pointer;
    font-size: 1.5em;            /* アイコンのサイズを調整 */
    line-height: 1;
  }
  
  #add-inventory-button.btn-add:hover {
    color: #9cb6ff; /* ホバー時の色を少し濃く */
  }
  
  #add-inventory-button.btn-add .fa-plus {
    /* 特に追加のスタイルは不要なことが多い */
  }

  .qr-actions-section {
    display: flex;         /* QRコードとボタンを横並びにする */
    align-items: center;   /* 垂直方向の中央揃え */
    gap: 20px;             /* QRコードとボタンの間の隙間 */
    margin-top: 20px;      /* 上の部位情報エリアとのマージン */
    padding: 20px;         /* このセクションの内側の余白 */
    border-top: 1px solid #f0f0f0; /* 上に区切り線 */
  }

/* QRコードを囲むラッパー */
  .qr-code-wrapper {
    flex-shrink: 0; /* QRコードが縮まないように */
  }

  .qr-code-wrapper img {
    width: 120px;  /* QRコードのサイズ */
    height: 120px;
    display: block; /* 余分な隙間をなくす */
  }

  /* アクションボタンを囲むコンテナ */
  .action-buttons {
    
    flex-direction: column;/* または column にして縦に並べる */
    gap: 10px;             /* ボタン間の隙間 */
  }
